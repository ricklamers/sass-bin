#!/usr/bin/env node

/*
  Credit for this set up goes to the excellent `esbuild` package.
*/

const fs = require("fs");
const os = require("os");
const path = require("path");

const knownWindowsPackages = {
  "win32 ia32 LE": "sass-bin-windows-32",
  "win32 x64 LE": "sass-bin-windows-64",
};

const knownUnixlikePackages = {
  "darwin x64 LE": "sass-bin-darwin-64",
  "linux ia32 LE": "sass-bin-linux-32",
  "linux x64 LE": "sass-bin-linux-64",
};

function pkgAndSubpathForCurrentPlatform() {
  let pkg;
  let subpath;
  let platformKey = `${process.platform} ${os.arch()} ${os.endianness()}`;

  if (platformKey in knownWindowsPackages) {
    pkg = knownWindowsPackages[platformKey];
    subpath = "bin/sass.bat";
  } else if (platformKey in knownUnixlikePackages) {
    pkg = knownUnixlikePackages[platformKey];
    subpath = "bin/sass";
  } else {
    throw new Error(`Unsupported platform: ${platformKey}`);
  }

  return { pkg, subpath };
}

function generateBinPath() {
  const { pkg, subpath } = pkgAndSubpathForCurrentPlatform();
  let binPath;

  try {
    // First check for the binary package from our "optionalDependencies". This
    // package should have been installed alongside this package at install time.
    binPath = require.resolve(`${pkg}/${subpath}`);
  } catch (e) {
    console.error(e);
    throw new Error(`The package "${pkg}" could not be found, and is needed by sass-bin.
If you are installing sass-bin with npm, make sure that you don't specify the
"--no-optional" flag. The "optionalDependencies" package.json feature is used
by sass-bin to install the correct binary executable for your current platform.`);
  }

  // The sass-bin binary executable can't be used in Yarn 2 in PnP mode because
  // it's inside a virtual file system and the OS needs it in the real file
  // system. So we need to copy the file out of the virtual file system into
  // the real file system.
  let isYarnPnP = false;
  try {
    require("pnpapi");
    isYarnPnP = true;
  } catch (e) {}
  if (isYarnPnP) {
    const sassbinLibDir = path.dirname(require.resolve(`${pkg}/${subpath}`));
    const binTargetPath = path.join(
      sassbinLibDir,
      `pnpapi-${pkg}-${path.basename(subpath)}`
    );
    if (!fs.existsSync(binTargetPath)) {
      fs.copyFileSync(binPath, binTargetPath);
      fs.chmodSync(binTargetPath, 0o755);
    }
    return binTargetPath;
  }

  return binPath;
}

require("child_process").execFileSync(
  generateBinPath(),
  process.argv.slice(2),
  { stdio: "inherit" }
);
